# 1. Making a First server and Serving static content : event context is must

# http {
#     server {
#         listen 9999;
#         root "D:/Github learning/nginx/code";
#     }
# }
# events {}


# 2. Serving Different format file

# http {
#     # types {
#     #     text/css  css;
#     #     text/html  html;
#     # }
#     # Without typing for every format we server nginx give file for that we need to include it
#     include mime.types; 
#     server {
#         listen 9999;
#         root "D:/Github learning/nginx/code";
#     }
# }
# events {}


# 3 . Serving Different file based on location
# 4. Redirect and Rewrite

# http {
#     include mime.types; 
#     server {
#         listen 9999;
#         root "D:/Github learning/nginx/code";

#         # location along with root append the value near location to the URL
#         location /second {
#             root "D:/Github learning/nginx/code";
#         }

#         # location with alias will call the location mentioned near alias
#         location /index {
#             alias "D:/Github learning/nginx/code";
#         }

#         location ~* /count/[0-9] {
#             root "D:/Github learning/nginx/code";
#             try_files /third/third.html /index.html =404;
#         }

#         location /third {
#             root "D:/Github learning/nginx/code";
#             try_files /third/third.html /index.html =404;
#         }

#         # Redirect : to different URL and to different location
#         # in simple you will notices the underlying URL in browser      

#         location /redirect {
#             return 307 /index;
#         }

#         # Rewrite : to differenr location with same URL
#         # "~*" for matching the route ( without considering the case sensitives ) and "~" case sensitive
#         # "^" : these block should be begining after the base URl like http://exmaple/<our-block>
#         rewrite /number/(\w+) /count/$1;

#         # (\w+) : to get the value from URL
#         # $1 : to get the paramter 1 implies fiest parameter
#     }
# }
# events {}




#  5. Load balancing
http {
    include mime.types; 
    upstream backend{
        server 127.0.0.1:3000;
        server 127.0.0.1:3001;
        server 127.0.0.1:3002;
        server 127.0.0.1:3003;
    }
    # These server will switch based on round robin algorithm
    server {
        listen 9999;
        # root "D:/Github learning/nginx/code";
        location / {
            proxy_pass http://backend;
        }


    }

    # run docker run -e MESSAGE="3000" -p 3000:3000 -d demo-server
    # run docker run -e MESSAGE="3001" -p 3001:3000 -d demo-server
    # run docker run -e MESSAGE="3002" -p 3002:3000 -d demo-server
    # run docker run -e MESSAGE="3003" -p 3003:3000 -d demo-server
    
}
events {}
